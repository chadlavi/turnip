{"version":3,"sources":["calculation.ts","History.tsx","date.ts","Turnip.tsx","serviceWorker.ts","index.tsx"],"names":["calculate","props","investment","quantity","initialPrice","gross","currentPrice","profit","lossful","profitable","profitPercentage","toFixed","numberWithCommas","x","toString","replace","History","history","setHistory","length","id","onClick","e","preventDefault","localStorage","removeItem","sort","a","b","Date","time","getTime","map","h","i","key","className","undefined","date","now","dateString","toDateString","isToday","toLocaleTimeString","hour","minute","formatDate","defaultQuantity","getItem","defaultInitialPrice","defaultCurrentPrice","defaultHistory","Turnip","React","useState","setQuantity","setInitialPrice","setCurrentPrice","fields","label","value","onChange","quantityNumber","parseFloat","initialPriceNumber","currentPriceNumber","noInput","noData","f","name","newValue","target","setItem","type","forEach","disabled","JSON","parse","newHistory","newHistoryString","stringify","href","rel","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e05a8b7d.chunk.js","sourcesContent":["export interface CalculateProps {\n  currentPrice: number,\n  initialPrice: number,\n  quantity: number,\n}\n\nexport const calculate = (props: CalculateProps) => {\n  const investment = props.quantity * props.initialPrice\n  const gross = props.quantity * props.currentPrice\n  const profit = gross - investment\n  const profitPercentage = (100 * (profit / investment) || 0).toFixed(2)\n  const profitable = profit > 0\n  const lossful = profit < 0\n  return {\n    gross,\n    investment,\n    lossful,\n    profit,\n    profitable,\n    profitPercentage,\n  }\n}\n\nexport const numberWithCommas = (x: string | number) => {\n  return (x || 0).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n}\n","import * as React from 'react'\nimport { formatDate } from './date'\nimport { calculate, numberWithCommas } from './calculation'\n\nexport interface HistoryItem {\n  time: Date\n  quantity: number,\n  initialPrice: number,\n  currentPrice: number,\n}\n\nexport type History = (HistoryItem | undefined)[]\n\nexport const History = (props: {history: History, setHistory: React.Dispatch<React.SetStateAction<string>>}) => {\n  const{\n    history,\n    setHistory,\n  } = props\n\n  const hasHistory = history.length > 0\n\n  const onClearHistory = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault()\n    setHistory('[]')\n    localStorage.removeItem('history')\n  }\n  \n  return hasHistory ? (\n    <>\n      <h2 id='history-header'>\n        <span>Saved data&nbsp;</span>\n        <button\n          id='clear-history-button'\n          onClick={onClearHistory}\n        >\n          delete all\n        </button>\n      </h2>\n      <div id='history-container'>\n        <table>\n          <thead>\n            <tr>\n              <th>Quantity</th>\n              <th>Initial price</th>\n              <th>Sale price</th>\n              <th>Gross</th>\n              <th>Profit</th>\n              <th>Time</th>\n            </tr>\n          </thead>\n          <tbody>\n            {history\n              .sort((a, b) => (a && b) ? new Date(b.time).getTime() - new Date(a.time).getTime() : 0)\n              .map((h, i) => {\n                if (h){\n                  const {\n                    gross,\n                    lossful,\n                    profit,\n                    profitable,\n                    profitPercentage,\n                  } = calculate({\n                    quantity: h.quantity,\n                    initialPrice: h.initialPrice,\n                    currentPrice: h.currentPrice,\n                  })\n                  return (\n                    <tr key={h.time.toString() || i}>\n                      <td>\n                        {numberWithCommas(h.quantity)}\n                      </td>\n                      <td>\n                        {numberWithCommas(h.initialPrice)}\n                      </td>\n                      <td>\n                        {numberWithCommas(h.currentPrice)}\n                      </td>\n                      <td>\n                        {numberWithCommas(gross)}\n                      </td>\n                      <td\n                        className={profitable ? 'good' : lossful ? 'bad' : undefined}\n                      >\n                        {numberWithCommas(profit)} ({profitable ? '+' : ''}{profitPercentage}%)\n                      </td>\n                      <td>\n                        {formatDate(new Date(h.time))}\n                      </td>\n                    </tr>\n                  )\n                } else {\n                  return ''\n                }\n              })\n            }\n          </tbody>\n        </table>\n      </div>\n    </>\n  ) : null\n}\n","export const formatDate = (date: Date) => {\n  const now = new Date()\n  const dateString = date.toDateString()\n  const isToday = now.toDateString() === dateString\n\n  const time = date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'})\n  return `${isToday ? 'Today' : dateString}, ${time}`\n}\n","import React from 'react'\nimport './Turnip.css'\nimport { History } from './History'\nimport { calculate, numberWithCommas } from './calculation'\n\nconst defaultQuantity = localStorage.getItem('quantity') || ''\nconst defaultInitialPrice = localStorage.getItem('initialPrice') || ''\nconst defaultCurrentPrice = localStorage.getItem('currentPrice') || ''\nconst defaultHistory = localStorage.getItem('history') || '[]'\n\nconst Turnip = () => {\n  const [quantity, setQuantity] = React.useState<string>(defaultQuantity)\n  const [initialPrice, setInitialPrice] = React.useState<string>(defaultInitialPrice)\n  const [currentPrice, setCurrentPrice] = React.useState<string>(defaultCurrentPrice)\n  const [history, setHistory] = React.useState<string>(defaultHistory)\n\n  const fields = [\n    {\n      label: 'Quantity',\n      value: quantity,\n      onChange: setQuantity,\n      id: 'quantity',\n    },\n    {\n      label: 'Initial price',\n      value: initialPrice,\n      onChange: setInitialPrice,\n      id: 'initialPrice',\n    },\n    {\n      label: 'Current price',\n      value: currentPrice,\n      onChange: setCurrentPrice,\n      id: 'currentPrice',\n    },\n  ]\n\n  const quantityNumber = parseFloat(quantity) || 0\n  const initialPriceNumber = parseFloat(initialPrice) || 0\n  const currentPriceNumber = parseFloat(currentPrice) || 0\n\n  const {\n    gross,\n    investment,\n    lossful,\n    profit,\n    profitable,\n    profitPercentage,\n  } = calculate({\n    currentPrice: currentPriceNumber,\n    initialPrice: initialPriceNumber,\n    quantity: quantityNumber,\n  })\n\n  const onReset = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault()\n    setQuantity('')\n    setInitialPrice('')\n    setCurrentPrice('')\n    fields.forEach((f) => localStorage.removeItem(f.id))\n  }\n\n  const onSave = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault()\n    const history: History = JSON.parse(localStorage.getItem('history') || '[]')\n    const newHistory: History = [\n      ...history,\n      {\n        time: new Date(),\n        quantity: quantityNumber,\n        initialPrice: initialPriceNumber,\n        currentPrice: currentPriceNumber,\n      }\n    ]\n    const newHistoryString = JSON.stringify(newHistory)\n    setHistory(newHistoryString)\n    localStorage.setItem('history', newHistoryString)\n  }\n\n  const noInput = quantity.length === 0 && initialPrice.length === 0 && currentPrice.length === 0\n  const noData = investment === 0 && profit === 0 && gross === 0\n\n  return (\n    <>\n      <h1>Turnip calc</h1>\n      <main className='app'>\n        <form id='inputs' className='half'>\n          {fields.map((f) => {\n            const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n              const newValue = e.target.value.replace(/[a-zA-Z]/gi, '')\n              f.onChange(newValue)\n              localStorage.setItem(f.id, newValue)\n            }\n            return (\n            <label key={f.id}>\n              <span>{f.label}</span>\n              <input\n                id={f.id}\n                name={f.id}\n                onChange={onChange}\n                type={'text'}\n                value={f.value}\n              />\n            </label>\n          )})}\n          <p className='button-row'>\n            <button\n              id='clear-button'\n              onClick={onReset}\n              disabled={noInput}\n              type={'button'}\n            >\n              reset fields\n            </button>\n          </p>\n        </form>\n        <div className='half'>\n          <div id='results'>\n        <div>\n            <p>\n              Investment: {numberWithCommas(investment)}\n            </p>\n            <p>\n              Gross: {numberWithCommas(gross)}\n            </p>\n            <p className={profitable ? 'good' : lossful ? 'bad' : undefined}>\n            {!lossful ? 'Profit' : 'Loss'}: {numberWithCommas(profit)} ({profitable ? '+' : ''}{profitPercentage}%)\n            </p>\n            </div>\n            <p className='button-row'>\n              <button\n                id='save-button'\n                onClick={onSave}\n                disabled={noData}\n              >\n                save\n              </button>\n\n            </p>\n          </div>\n        </div>\n        <History setHistory={setHistory} history={JSON.parse(history)} />\n        <div className='github-link'>\n          <a\n            href='https://github.com/chadlavi/turnip'\n            rel='noopener noreferrer'\n            target='_blank'\n          >\n            https://github.com/chadlavi/turnip\n          </a>\n        </div>\n      </main>\n    </>\n  )\n}\n\nexport default Turnip\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker === null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType !== null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Turnip is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Turnip from './Turnip'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Turnip />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}