{"version":3,"sources":["calculation.ts","History.tsx","date.ts","Turnip.tsx","serviceWorker.ts","index.tsx"],"names":["calculate","props","investment","quantity","initialPrice","gross","currentPrice","profit","lossful","profitable","profitPercentage","toFixed","numberWithCommas","x","toString","replace","History","React","deleted","setDeleted","history","setHistory","hasHistory","length","as","id","onClick","e","preventDefault","localStorage","removeItem","className","direction","contentMinWidth","sort","a","b","Date","time","getTime","map","h","i","key","undefined","date","now","dateString","toDateString","isToday","toLocaleTimeString","hour","minute","formatDate","open","setOpen","error","mini","defaultQuantity","parseFloat","getItem","defaultInitialPrice","defaultCurrentPrice","defaultHistory","Turnip","useState","setQuantity","setInitialPrice","setCurrentPrice","success","setSuccess","fields","label","value","setter","quantityNumber","initialPriceNumber","currentPriceNumber","noInput","noData","selectAll","t","currentTarget","setTimeout","select","spacing","size","f","htmlFor","name","onChange","newValue","setItem","type","inputMode","pattern","min","onFocus","forEach","disabled","currentHistory","JSON","parse","Array","newHistory","newHistoryString","stringify","primary","href","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5fbede0c.chunk.js","sourcesContent":["export interface CalculateProps {\n    currentPrice: number\n    initialPrice: number\n    quantity: number\n}\n\nexport interface CalculateReturn {\n  gross: number\n  investment: number\n  lossful: boolean\n  profit: number\n  profitable: boolean\n  profitPercentage: string\n}\n\nexport const calculate = (props: CalculateProps): CalculateReturn => {\n  const investment = props.quantity * props.initialPrice\n  const gross = props.quantity * props.currentPrice\n  const profit = gross - investment\n  const profitPercentage = (100 * (profit / investment) || 0).toFixed(2)\n  const profitable = profit > 0\n  const lossful = profit < 0\n  return {\n    gross,\n    investment,\n    lossful,\n    profit,\n    profitable,\n    profitPercentage,\n  }\n}\n\nexport const numberWithCommas = (x: string | number): string => (x || 0)\n  .toString()\n  .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n","import * as React from 'react'\nimport { formatDate } from './date'\nimport { calculate, numberWithCommas } from './calculation'\nimport {\n  Button,\n  Header,\n  Notification,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  Grid,\n  GridItem,\n  ScrollContainer,\n} from '@chadlavi/clear'\n\nexport interface HistoryItem {\n    time: Date\n    quantity: number\n    initialPrice: number\n    currentPrice: number\n}\n\nexport type History = (HistoryItem | undefined)[]\n\nexport const History = (\n  props: {history: History; setHistory: React.Dispatch<React.SetStateAction<string>>}\n): JSX.Element | null => {\n  const [deleted, setDeleted] = React.useState<boolean>(false)\n  const{\n    history,\n    setHistory,\n  } = props\n\n  const hasHistory = history.length > 0\n\n  const onClearHistory = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.preventDefault()\n    setHistory('[]')\n    localStorage.removeItem('history')\n    setDeleted(true)\n  }\n  \n  return (\n    <>\n      {hasHistory && \n        <Grid>\n          <GridItem>\n            <Header as='h2'id='history-header'>\n              <span>Saved data&nbsp;</span>\n              <Button\n                id='clear-history-button'\n                onClick={onClearHistory}\n                className={'elevation-1'}\n              >\n                Delete all\n              </Button>\n            </Header>\n          </GridItem>\n          <GridItem>\n            <ScrollContainer direction='horizontal' contentMinWidth={728}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell as='th'>Quantity</TableCell>\n                    <TableCell as='th'>Initial price</TableCell>\n                    <TableCell as='th'>Sale price</TableCell>\n                    <TableCell as='th'>Gross</TableCell>\n                    <TableCell as='th'>Profit</TableCell>\n                    <TableCell as='th'>Time</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {history\n                    .sort((a, b) => (a && b) ? new Date(b.time).getTime() - new Date(a.time).getTime() : 0)\n                    .map((h, i) => {\n                      if (h){\n                        const {\n                          gross,\n                          lossful,\n                          profit,\n                          profitable,\n                          profitPercentage,\n                        } = calculate({\n                          quantity: h.quantity,\n                          initialPrice: h.initialPrice,\n                          currentPrice: h.currentPrice,\n                        })\n                        return (\n                          <TableRow key={h.time.toString() || i}>\n                            <TableCell>\n                              {numberWithCommas(h.quantity)}\n                            </TableCell>\n                            <TableCell>\n                              {numberWithCommas(h.initialPrice)}\n                            </TableCell>\n                            <TableCell>\n                              {numberWithCommas(h.currentPrice)}\n                            </TableCell>\n                            <TableCell>\n                              {numberWithCommas(gross)}\n                            </TableCell>\n                            <TableCell\n                              className={profitable ? 'good' : lossful ? 'bad' : undefined}\n                            >\n                              {numberWithCommas(profit)} ({profitable ? '+' : ''}{profitPercentage}%)\n                            </TableCell>\n                            <TableCell>\n                              {formatDate(new Date(h.time))}\n                            </TableCell>\n                          </TableRow>\n                        )\n                      } else {\n                        return ''\n                      }\n                    })\n                  }\n                </TableBody>\n              </Table>\n            </ScrollContainer>\n          </GridItem>\n        </Grid>\n      }\n      <Notification\n        open={deleted}\n        setOpen={setDeleted}\n        error\n        mini\n      >\n        Saved data deleted\n      </Notification>\n    </>\n  )\n}\n","export const formatDate = (date: Date): string => {\n  const now = new Date()\n  const dateString = date.toDateString()\n  const isToday = now.toDateString() === dateString\n\n  const time = date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'})\n  return `${isToday ? 'Today' : dateString}, ${time}`\n}\n","import React from 'react'\nimport './Turnip.css'\nimport { History } from './History'\nimport { calculate, numberWithCommas } from './calculation'\nimport {\n  Page,\n  Header,\n  Grid,\n  GridItem,\n  Input,\n  Button,\n  Label,\n  Link,\n  Paragraph,\n  Notification,\n} from '@chadlavi/clear'\n\nconst defaultQuantity = parseFloat(localStorage.getItem('quantity') || '')\nconst defaultInitialPrice = parseFloat(localStorage.getItem('initialPrice') || '')\nconst defaultCurrentPrice = parseFloat(localStorage.getItem('currentPrice') || '')\nconst defaultHistory = localStorage.getItem('history') || '[]'\n\nconst Turnip = (): JSX.Element => {\n  const [quantity, setQuantity] = React.useState<number | undefined>(defaultQuantity)\n  const [initialPrice, setInitialPrice] = React.useState<number | undefined>(defaultInitialPrice)\n  const [currentPrice, setCurrentPrice] = React.useState<number | undefined>(defaultCurrentPrice)\n  const [history, setHistory] = React.useState<string>(defaultHistory)\n  const [success, setSuccess] = React.useState<boolean>(false)\n\n  const fields = [\n    {\n      label: 'Quantity',\n      value: quantity,\n      setter: setQuantity,\n      id: 'quantity',\n    },\n    {\n      label: 'Initial price',\n      value: initialPrice,\n      setter: setInitialPrice,\n      id: 'initialPrice',\n    },\n    {\n      label: 'Current price',\n      value: currentPrice,\n      setter: setCurrentPrice,\n      id: 'currentPrice',\n    },\n  ]\n\n  const quantityNumber = quantity || 0\n  const initialPriceNumber = initialPrice || 0\n  const currentPriceNumber = currentPrice || 0\n\n  const {\n    gross,\n    investment,\n    lossful,\n    profit,\n    profitable,\n    profitPercentage,\n  } = calculate({\n    currentPrice: currentPriceNumber,\n    initialPrice: initialPriceNumber,\n    quantity: quantityNumber,\n  })\n\n  const onReset = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.preventDefault()\n    setQuantity(undefined)\n    setInitialPrice(undefined)\n    setCurrentPrice(undefined)\n    fields.forEach((f) => localStorage.removeItem(f.id))\n  }\n\n  const onSave = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.preventDefault()\n    const currentHistory = JSON.parse(localStorage.getItem('history') || '[]')\n    const history: History = currentHistory instanceof Array ? currentHistory : []\n    const newHistory: History = [\n      ...history,\n      {\n        time: new Date(),\n        quantity: quantityNumber,\n        initialPrice: initialPriceNumber,\n        currentPrice: currentPriceNumber,\n      }\n    ]\n    const newHistoryString = JSON.stringify(newHistory)\n    setHistory(newHistoryString)\n    localStorage.setItem('history', newHistoryString)\n    setSuccess(true)\n  }\n\n  const noInput = (quantity === 0 || quantity === undefined) \n    && (initialPrice === 0 || initialPrice === undefined) \n    && (currentPrice === 0 || currentPrice === undefined)\n\n  const noData = investment === 0 && profit === 0 && gross === 0\n\n  const selectAll = (e: React.MouseEvent<HTMLInputElement> | React.FocusEvent<HTMLInputElement>): void => {\n    const t = e.currentTarget\n    setTimeout(() => {\n      t.select()\n    }, 100)\n  }\n\n  return (\n    <>\n      <Page>\n        <Grid spacing={8}>\n          <GridItem>\n            <Header>Turnip calc</Header>\n          </GridItem>\n          <GridItem size={6}>\n            <Grid spacing={8}>\n              {fields.map((f) => {\n                const onChange = (\n                  setter: React.Dispatch<React.SetStateAction<number | undefined>>\n                ) => (e: React.ChangeEvent<HTMLInputElement>): void => {\n                  const newValue = parseFloat(e.currentTarget.value || '0')\n                  setter(newValue)\n                  localStorage.setItem(f.id, (newValue).toString())\n                }\n                return (\n                  <GridItem key={f.id}>\n                    <Label htmlFor={f.id}>{f.label}</Label>\n                    <Input\n                      id={f.id}\n                      name={f.id}\n                      onChange={onChange(f.setter)}\n                      type={'number'}\n                      inputMode={'decimal'}\n                      pattern={'[0-9]*'}\n                      value={f.value}\n                      min={0}\n                      onFocus={selectAll}\n                      onClick={selectAll}\n                    />\n                  </GridItem>\n                )})}\n              <GridItem className='button-row'>\n                <Button\n                  id='clear-button'\n                  onClick={onReset}\n                  disabled={noInput}\n                  className={noInput ? undefined : 'elevation-1'}\n                >\n                  Reset fields\n                </Button>\n              </GridItem>\n            </Grid>\n          </GridItem>\n          <GridItem size={6}>\n            <div className='elevation-4' id='results'>\n              <div>\n                <p>\n                Investment: {numberWithCommas(investment)}\n                </p>\n                <p>\n                Gross: {numberWithCommas(gross)}\n                </p>\n                <p className={profitable ? 'good' : lossful ? 'bad' : undefined}>\n                  {!lossful \n                    ? 'Profit'\n                    : 'Loss'\n                  }: {numberWithCommas(profit)} ({profitable ? '+' : ''}{profitPercentage}%)\n                </p>\n              </div>\n              <Paragraph as='div' className='button-row'>\n                <Button\n                  id='save-button'\n                  onClick={onSave}\n                  disabled={noData}\n                  primary\n                  className={noData ? undefined : 'elevation-2'}\n                >\n                  Save\n                </Button>\n                <Notification\n                  open={success}\n                  setOpen={setSuccess}\n                  mini\n                >\n                  Saved\n                </Notification>\n              </Paragraph>\n            </div>\n          </GridItem>\n          <GridItem>\n            <History setHistory={setHistory} history={JSON.parse(history)} />\n            <Paragraph className='github-link'>\n              Built with <Link href='https://chadlavi.github.io/clear/'>Clear</Link>{' \\u00b7 '}\n              <Link href='https://github.com/chadlavi/turnip'>\n                https://github.com/chadlavi/turnip\n              </Link>\n            </Paragraph>\n          </GridItem>\n        </Grid>\n      </Page>\n    </>\n  )\n}\n\nexport default Turnip\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker === null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType !== null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Turnip is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Turnip from './Turnip'\nimport * as serviceWorker from './serviceWorker'\nimport { CSSVariables, GlobalStyles } from '@chadlavi/clear'\n\nReactDOM.render(\n  <React.StrictMode>\n    <CSSVariables/>\n    <GlobalStyles/>\n    <Turnip />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}