{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["numberWithCommas","x","toString","replace","App","React","useState","localStorage","getItem","quantity","setQuantity","initialPrice","setInitialPrice","currentPrice","setCurrentPrice","investment","parseFloat","gross","profit","profitPercentage","toFixed","profitable","lossful","fields","label","type","value","onChange","id","className","map","f","key","e","newValue","target","setItem","onClick","preventDefault","clear","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qJAGMA,G,KAAmB,SAACC,GACxB,OAAOA,EAAEC,WAAWC,QAAQ,wBAAyB,OAiGxCC,EA9FH,WAAO,IAAD,EACgBC,IAAMC,SAAiBC,aAAaC,QAAQ,aAAe,IAD3E,mBACTC,EADS,KACCC,EADD,OAEwBL,IAAMC,SAAiBC,aAAaC,QAAQ,iBAAmB,IAFvF,mBAETG,EAFS,KAEKC,EAFL,OAGwBP,IAAMC,SAAiBC,aAAaC,QAAQ,iBAAmB,IAHvF,mBAGTK,EAHS,KAGKC,EAHL,KAaVC,EAAaC,WAAWP,GAAYO,WAAWL,IAAiB,EAChEM,EAAQD,WAAWP,GAAYO,WAAWH,IAAiB,EAC3DK,EAASD,EAAQF,EACjBI,GAA2BD,EAASH,EAAhB,KAA+B,GAAGK,QAAQ,GAC9DC,EAAaH,EAAS,EACtBI,EAAUJ,EAAS,EAEnBK,EAAS,CACb,CACEC,MAAO,WACPC,KAAM,SACNC,MAAOjB,EACPkB,SAAUjB,EACVkB,GAAI,YAEN,CACEJ,MAAO,gBACPC,KAAM,SACNC,MAAOf,EACPgB,SAAUf,EACVgB,GAAI,gBAEN,CACEJ,MAAO,gBACPC,KAAM,SACNC,MAAOb,EACPc,SAAUb,EACVc,GAAI,iBAIR,OACE,oCACE,2CACA,yBAAKC,UAAU,OACb,0BAAMD,GAAG,UACNL,EAAOO,KAAI,SAACC,GAMX,OACA,2BAAOC,IAAKD,EAAEH,IACZ,8BAAOG,EAAEP,OACT,2BACEC,KAAMM,EAAEN,KACRC,MAAOK,EAAEL,MACTC,SAXa,SAACM,GAChB,IAAMC,EAAWD,EAAEE,OAAOT,MAC1BK,EAAEJ,SAASO,GACX3B,aAAa6B,QAAQL,EAAEH,GAAIM,IASzBN,GAAIG,EAAEH,UAKd,6BACE,yBAAKA,GAAG,WACN,0CACe5B,EAAiBe,IAEhC,qCACUf,EAAiBiB,IAE3B,uBAAGY,UAAWR,EAAa,OAASC,EAAU,MAAQ,IAClDA,EAAqB,OAAX,SADd,KACmCtB,EAAiBkB,GADpD,KAC+DC,EAD/D,MAGA,uBAAGU,UAAU,cACX,4BACED,GAAG,eACHS,QA5EK,SAACJ,GAClBA,EAAEK,iBACF5B,EAAY,IACZE,EAAgB,IAChBE,EAAgB,IAChBP,aAAagC,UAqEH,mBC1EMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.835fe09c.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\n\nconst numberWithCommas = (x: string | number) => {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n}\n\nconst App = () => {\n  const [quantity, setQuantity] = React.useState<string>(localStorage.getItem('quantity') || '')\n  const [initialPrice, setInitialPrice] = React.useState<string>(localStorage.getItem('initialPrice') || '')\n  const [currentPrice, setCurrentPrice] = React.useState<string>(localStorage.getItem('currentPrice') || '')\n\n  const onClearAll = (e:  React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault()\n    setQuantity('')\n    setInitialPrice('')\n    setCurrentPrice('')\n    localStorage.clear()\n  }\n\n  const investment = parseFloat(quantity) * parseFloat(initialPrice) || 0\n  const gross = parseFloat(quantity) * parseFloat(currentPrice) || 0\n  const profit = gross - investment\n  const profitPercentage = (100 * (profit / investment) || 0).toFixed(2)\n  const profitable = profit > 0\n  const lossful = profit < 0\n\n  const fields = [\n    {\n      label: 'Quantity',\n      type: 'number',\n      value: quantity,\n      onChange: setQuantity,\n      id: 'quantity',\n    },\n    {\n      label: 'Initial price',\n      type: 'number',\n      value: initialPrice,\n      onChange: setInitialPrice,\n      id: 'initialPrice',\n    },\n    {\n      label: 'Current price',\n      type: 'number',\n      value: currentPrice,\n      onChange: setCurrentPrice,\n      id: 'currentPrice',\n    },\n  ]\n\n  return (\n    <>\n      <h1>Turnip calc</h1>\n      <div className='app'>\n        <form id='inputs'>\n          {fields.map((f) => {\n            const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n              const newValue = e.target.value\n              f.onChange(newValue)\n              localStorage.setItem(f.id, newValue)\n            }\n            return (\n            <label key={f.id}>\n              <span>{f.label}</span>\n              <input\n                type={f.type}\n                value={f.value}\n                onChange={onChange}\n                id={f.id}\n              />\n            </label>\n          )})}\n        </form>\n        <div>\n          <div id='results'>\n            <p>\n              Investment: {numberWithCommas(investment)}\n            </p>\n            <p>\n              Gross: {numberWithCommas(gross)}\n            </p>\n            <p className={profitable ? 'good' : lossful ? 'bad' : ''}>\n              {!lossful ? 'Profit' : 'Loss'}: {numberWithCommas(profit)} ({profitPercentage}%)\n            </p>\n            <p className='button-row'>\n              <button\n                id='clear-button'\n                onClick={onClearAll}\n              >\n                clear all\n              </button>\n            </p>\n          </div>\n        </div>\n\n      </div>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}